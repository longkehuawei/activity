{"version":3,"sources":["top.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","logo","react_default","a","createElement","style","background","flex","src","width","height","color","fontSize","className","paddingTop","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,iNCiEzBC,SA5DeC,qLAM1B,OACEC,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAACC,WAAW,UAAUC,KAAK,IACnCL,EAAAC,EAAAC,cAAA,OAAKI,IAAKP,IAAOI,MAAO,CAACI,MAAM,IAAIC,OAAO,OAC1CR,EAAAC,EAAAC,cAAA,KAAGC,MAAO,CAACM,MAAM,UAAUC,SAAS,IAAKC,UAAU,OAAnD,4BAGAX,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAACM,MAAM,UAAUC,SAAS,KAAtC,8IAGAV,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAACM,MAAM,UAAUC,SAAS,KAAtC,8IAGAV,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAACM,MAAM,UAAUC,SAAS,KAAtC,8IAGAV,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAACM,MAAM,UAAUC,SAAS,KAAtC,8FAGAV,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAACM,MAAM,UAAUC,SAAS,KAAtC,8IAIAV,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAACM,MAAM,UAAUC,SAAS,KAAtC,4GAGAV,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAACM,MAAM,UAAUC,SAAS,KAAtC,8IAGAV,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAACM,MAAM,UAAUC,SAAS,KAAtC,mIAGAV,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAACM,MAAM,UAAUC,SAAS,KAAtC,gGAGAV,EAAAC,EAAAC,cAAA,KAAGC,MAAO,CAACM,MAAM,UAAUC,SAAS,IAAKC,UAAU,OAAnD,kCAGAX,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAACM,MAAM,UAAUC,SAAS,GAAGE,WAAW,IAAKD,UAAU,QAAnE,uEACiBX,EAAAC,EAAAC,cAAA,WADjB,uGAEwBF,EAAAC,EAAAC,cAAA,WAFxB,uEAGiBF,EAAAC,EAAAC,cAAA,WAHjB,sFAIsBF,EAAAC,EAAAC,cAAA,WAJtB,qGAKsBF,EAAAC,EAAAC,cAAA,WALtB,6OAMgDF,EAAAC,EAAAC,cAAA,WANhD,yFAOoBF,EAAAC,EAAAC,cAAA,oBA/CZW,cCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpB,EAAAC,EAAAC,cAACmB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.651d8f27.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/top.0045407b.png\";","import React, { Component } from 'react';\nimport logo from './top.png';\nimport './App.css';\nconst divStyle = {\n    color: 'red',\n    backgroundImage: 'url(' + logo + ')',\n    // 或者 background: `url${require(\"1.jpg\")}`\n};\nclass App extends Component {\n\n  render() {\n    return (\n      <div style={{background:'#ffd3b9',flex:1}}>\n          <img src={logo}  style={{width:320,height:270}} ></img>\n          <p style={{color:'#8A1524',fontSize:16}} className=\"App\">\n              活动细则\n          </p>\n          <div style={{color:'#8A1524',fontSize:14}}>\n              喜迎猪年，愿君身体健康，福寿绵长，吉祥如意，财\n          </div>\n          <div style={{color:'#8A1524',fontSize:14}}>\n              源滚滚，心想事成，万事顺利，新年快乐，好运平安\n          </div>\n          <div style={{color:'#8A1524',fontSize:14}}>\n              陌玩平台为大家准备了几份小礼物送给大家，恭祝大\n          </div>\n          <div style={{color:'#8A1524',fontSize:14,}}>\n              家新年快乐，新的一年猪年大吉。\n          </div>\n          <div style={{color:'#8A1524',fontSize:14,}}>\n              参与方式：陌友通过发送关于猪年的广场动态，标题\n\n          </div>\n          <div style={{color:'#8A1524',fontSize:14,}}>\n              添加“#年味#”，并晒出自家的年夜饭。\n          </div>\n          <div style={{color:'#8A1524',fontSize:14,}}>\n              奖品：评论数最多的前三名陌友获得平台送出的语音\n          </div>\n          <div style={{color:'#8A1524',fontSize:14,}}>\n              猪小屁”；并且每天会随机抽取1名用户，送出我\n          </div>\n          <div style={{color:'#8A1524',fontSize:14,}}>\n              们的猪年毛绒玩具，连续送出10件。\n          </div>\n          <p style={{color:'#8A1524',fontSize:16}} className=\"App\">\n              活动规则：\n          </p>\n          <div style={{color:'#A13F4C',fontSize:13,paddingTop:20}} className=\"text\">\n              1.必须使用陌玩平台账号。<br />\n              2.发布的动态必须加上活动主题#年味#。<br />\n              3.多条评论刷屏视为一条。<br />\n              4.礼品会在2月11日全部发放完毕。<br />\n              5.每日中奖名单小陌会在广场中列出。<br />\n              6.礼品发放需要添加小陌的个人QQ，联系小陌发放奖励。（小陌QQ在广场的小陌动态内可见）<br />\n              7.活动的最终解释权归陌玩所有。<br />\n\n          </div>\n\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}